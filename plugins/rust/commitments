# -*- mode: sh; eval: (sh-set-shell "zsh") -*-

# ======================================================================
# Internal Functions
# ======================================================================

__init() {
    local repo_root=$1
    log_trace "initializing Rust/Cargo environment variables"

    if grep -e "^[:space:]*\[workspace\]" ${repo_root}/Cargo.toml >/dev/null ; then
        CARGO_WORKSPACE="--workspace"
        CRATE_KIND=workspace
    else
        CARGO_WORKSPACE=""
        CRATE_KIND=package
    fi

    if [[ -z $CARGO_FEATURES ]] ; then
        CARGO_FEATURES="--all-features"
    fi

    if [[ -z $CARGO_TARGETS ]] ; then
        CARGO_TARGETS="--all-targets"
    fi
}

__cargo() {
    local message=$1
    local command=$2
    local arguments=(${@:3})

    log_info ${message}
    log_debug "Running: cargo ${command} ${arguments}"
    if ! cargo ${command} ${arguments} ; then
        log_panic ${CMT_HOOK_FAILED} "Command 'cargo ${command}' failed"
    else
        msg_success "Command 'cargo ${command}' succeeded"
    fi
    return ${CMT_SUCCESS}
}

# ======================================================================
# Commitment Functions  enabled
# ======================================================================

rust_enabled() {
    local repo_root=$1
    log_trace "Looking for ${repo_root}/Cargo.toml to enable Rust plugin"
    test -f ${repo_root}/Cargo.toml
}

# ======================================================================
#  Commitment Functions  pre-commit-hook
# ======================================================================

rust_pre_commit() {
    local repo_root=$1

    __init ${repo_root}

    __cargo "Running security audit" \
            audit

    __cargo "Checking ${CRATE_KIND}" \
            check ${CARGO_WORKSPACE} ${CARGO_TARGETS} ${CARGO_FEATURES}

    __cargo "Linting ${CRATE_KIND}" \
            clippy ${CARGO_WORKSPACE} ${CARGO_TARGETS} ${CARGO_FEATURES} -- -D warnings

    __cargo "Formatting ${CRATE_KIND}" \
            fmt --all -- --check

    for TEST_FEATURES in "" "--all-features" "--no-default-features" ; do
        __cargo "Testing ${CRATE_KIND} (features ${TEST_FEATURES})" \
                test ${CARGO_WORKSPACE} ${CARGO_TARGETS} ${TEST_FEATURES} --no-fail-fast
    done

    __cargo "Documenting ${CRATE_KIND}" \
            doc ${CARGO_WORKSPACE} ${CARGO_FEATURES} --no-deps

    __cargo "Checking for outdated dependencies" \
            outdated ${CARGO_WORKSPACE} --root-deps-only

    return ${CMT_SUCCESS}
}
